"""
Simple PDF Exporter for Purchase Orders (Fallback)
Uses fpdf library which is easier to install
"""
import os
from datetime import datetime

# Try to import reportlab, if not available use fpdf
try:
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.enums import TA_CENTER, TA_LEFT
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("⚠️ ReportLab not available, using text export instead")


class SimplePDFExporter:
    """
    Simple PDF/Text exporter for purchase orders
    """
    
    def __init__(self, output_dir='data/purchase_orders/pdf'):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def export_po_to_pdf(self, po_data: dict, filename: str = None) -> str:
        """
        Export PO to PDF or text file
        """
        if filename is None:
            filename = f"{po_data['po_number']}.pdf"
        
        filepath = os.path.join(self.output_dir, filename)
        
        if REPORTLAB_AVAILABLE:
            return self._export_with_reportlab(po_data, filepath)
        else:
            # Fallback: Export as formatted text file
            txt_filepath = filepath.replace('.pdf', '.txt')
            return self._export_as_text(po_data, txt_filepath)
    
    def _export_as_text(self, po_data: dict, filepath: str) -> str:
        """
        Export PO as formatted text file (fallback)
        """
        content = self._generate_text_content(po_data)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return filepath
    
    def _generate_text_content(self, po: dict) -> str:
        """
        Generate formatted text content for PO
        """
        content = f"""
{'='*80}
                          PURCHASE ORDER
{'='*80}

PO Number:          {po['po_number']}
Date:               {po['created_date']}
Status:             {po['status']}
Created By:         {po['created_by']}

{'='*80}
VENDOR INFORMATION
{'='*80}
Vendor Name:        {po['vendor']['name']}
Rating:             {po['vendor']['rating']}/5.0
Payment Terms:      {po['vendor']['payment_terms']}
Reliability:        {po['vendor']['reliability']}

{'='*80}
MATERIAL DETAILS
{'='*80}
Material:           {po['material']['name']}
Quantity:           {po['material']['quantity']} {po['material']['unit']}
Unit Price:         ${po['material']['unit_price']:,.2f}/{po['material']['unit']}
Market Price:       ${po['material']['current_market_price']:,.2f}/{po['material']['unit']}

{'='*80}
DELIVERY INFORMATION
{'='*80}
Expected Delivery:  {po['delivery']['expected_date']}
Delivery Time:      {po['delivery']['delivery_days']} days
Delivery Address:   {po['delivery']['delivery_address']}
Contact Person:     {po['delivery']['contact_person']}

{'='*80}
FINANCIAL SUMMARY
{'='*80}
Subtotal:           ${po['financial']['subtotal']:,.2f}
Tax ({po['financial']['tax_rate']*100:.0f}%):            ${po['financial']['tax_amount']:,.2f}
{'─'*80}
TOTAL AMOUNT:       ${po['financial']['total_amount']:,.2f}
{'─'*80}
Potential Savings:  ${po['financial']['potential_savings']:,.2f}

{'='*80}
AI RECOMMENDATION CONTEXT
{'='*80}
Recommendation:     {po['ai_recommendation']['recommendation']}
Reason:             {po['ai_recommendation']['reason']}
Confidence:         {po['ai_recommendation']['confidence']}
Forecast Change:    {po['ai_recommendation']['forecast_change']}

{'='*80}
INVENTORY CONTEXT
{'='*80}
Current Stock:      {po['inventory_context']['current_stock']} tons
Min Threshold:      {po['inventory_context']['min_threshold']} tons
Daily Consumption:  {po['inventory_context']['daily_consumption']} tons
Days Remaining:     {po['inventory_context']['days_remaining']} days

{'='*80}
TERMS AND CONDITIONS
{'='*80}
"""
        for i, term in enumerate(po['terms'], 1):
            content += f"{i}. {term}\n"
        
        content += f"""
{'='*80}
APPROVAL STATUS
{'='*80}
Requester:  {po['approvals']['requester']['name']} - {po['approvals']['requester']['status']}
Manager:    {po['approvals']['manager']['name']} - {po['approvals']['manager']['status']}
Finance:    {po['approvals']['finance']['name']} - {po['approvals']['finance']['status']}

{'='*80}
Generated by Smart Procurement System
{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
{'='*80}
"""
        return content
    
    def _export_with_reportlab(self, po_data: dict, filepath: str) -> str:
        """
        Export PO using ReportLab (if available)
        """
        try:
            doc = SimpleDocTemplate(
                filepath,
                pagesize=letter,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                textColor=colors.HexColor('#667eea'),
                spaceAfter=30,
                alignment=TA_CENTER,
                fontName='Helvetica-Bold'
            )
            title = Paragraph("PURCHASE ORDER", title_style)
            story.append(title)
            story.append(Spacer(1, 0.3*inch))
            
            # PO Info
            po_info = [
                ['PO Number:', po_data['po_number'], 'Date:', po_data['created_date']],
                ['Status:', po_data['status'], 'Created By:', po_data['created_by']]
            ]
            
            table = Table(po_info, colWidths=[1.5*inch, 2*inch, 1.5*inch, 2*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                ('BACKGROUND', (2, 0), (2, -1), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
            ]))
            story.append(table)
            story.append(Spacer(1, 0.2*inch))
            
            # Material Info
            material_header = Paragraph("<b>MATERIAL DETAILS</b>", styles['Heading2'])
            story.append(material_header)
            
            material_info = [
                ['Material:', po_data['material']['name']],
                ['Quantity:', f"{po_data['material']['quantity']} {po_data['material']['unit']}"],
                ['Unit Price:', f"${po_data['material']['unit_price']:.2f}"],
                ['Total Amount:', f"${po_data['financial']['total_amount']:,.2f}"]
            ]
            
            mat_table = Table(material_info, colWidths=[2*inch, 4.5*inch])
            mat_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(mat_table)
            
            # Build PDF
            doc.build(story)
            return filepath
            
        except Exception as e:
            print(f"⚠️ ReportLab export failed: {e}")
            # Fallback to text
            txt_filepath = filepath.replace('.pdf', '.txt')
            return self._export_as_text(po_data, txt_filepath)


# Global instance
_simple_pdf_exporter = None

def get_simple_pdf_exporter():
    """Get or create global simple PDF exporter instance"""
    global _simple_pdf_exporter
    if _simple_pdf_exporter is None:
        _simple_pdf_exporter = SimplePDFExporter()
    return _simple_pdf_exporter


if __name__ == '__main__':
    # Test the exporter
    sample_po = {
        'po_number': 'PO-202510-TEST',
        'status': 'DRAFT',
        'created_date': '2025-10-16 14:30:00',
        'created_by': 'Test User',
        'material': {
            'name': 'Copper',
            'quantity': 100,
            'unit': 'tons',
            'unit_price': 8450.00,
            'current_market_price': 8500.00
        },
        'vendor': {
            'name': 'Test Vendor',
            'rating': 4.5,
            'payment_terms': 'Net 30',
            'reliability': 'High'
        },
        'delivery': {
            'expected_date': '2025-10-23',
            'delivery_days': 7,
            'delivery_address': 'Test Address',
            'contact_person': 'Test Person'
        },
        'financial': {
            'subtotal': 845000.00,
            'tax_rate': 0.18,
            'tax_amount': 152100.00,
            'total_amount': 997100.00,
            'potential_savings': 5000.00
        },
        'ai_recommendation': {
            'recommendation': 'BUY NOW',
            'reason': 'Test reason',
            'confidence': 'High',
            'forecast_change': '+2.5%'
        },
        'inventory_context': {
            'current_stock': 150,
            'min_threshold': 100,
            'daily_consumption': 15,
            'days_remaining': 10.0
        },
        'terms': [
            'Term 1',
            'Term 2',
            'Term 3'
        ],
        'approvals': {
            'requester': {'name': 'Test', 'status': 'APPROVED', 'date': '2025-10-16'},
            'manager': {'name': 'Pending', 'status': 'PENDING', 'date': None},
            'finance': {'name': 'Pending', 'status': 'PENDING', 'date': None}
        }
    }
    
    exporter = SimplePDFExporter()
    filepath = exporter.export_po_to_pdf(sample_po)
    print(f"✓ PO exported to: {filepath}")
